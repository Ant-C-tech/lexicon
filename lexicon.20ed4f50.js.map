{"version":3,"sources":["utils.js","index.js"],"names":["getGoogleTranslateUrl","str","replace","getSymbolLessStr","getMerriamWebsterUrl","word","dictionary","window","dataStore","dictionarySet","currentDictionary","currentInputtedText","currentTranslation","currentActiveText","currentWord","undefined","currentDictionaryCard","styles","dictionaryCardBlock__cover","wmCover","dictionaryCardBlock__coverTitle","startApp","inputValue","document","querySelector","value","renderApp","resetApp","isTranslationLoading","translationError","isWordDataLoading","wordDataError","textTranslationResults","fetch","then","response","json","getTranslationData","data","translationResult","responseContent","forEach","responseContentPart","translationPart","parseTranslationData","html","activeTextBlock","trim","split","activeTextBlock__word","createActiveText","catch","finally","wordDataResults","getWordData","cleanText","clearText","hasLink","test","hasNeedCapitalize","hasReferenceToDefinition","hasCrossReference","linkLessTarget","match","linkLessRes","needCapitalize","capitalized","toUpperCase","needReference","numberOfReference","needRemoveCrossReference","withoutCrossReference","parseDataFromCollegiateResponse","changeAsteriskToDot","result","wordCard","dataItem","dataItemCard","wordCard__title","wordGrammaticalFunction","wordCard__grammatical","wordSyllables","wordCard__wordSyllables","mw","wordTranscription","wordCard__verticalDivider","stemsArr","wordCard__defListNum","variant","sseq","definitionGroups","wordCard__defTitle","definitions","flat","map","definitionItem","definition","wordCard__defListItem","definitionData","definitionNumber","elem","wordCard__defExample","length","example","t","exampleContent","item","createDefList","relativesArr","relatives","relativeData","ure","relativeWord","fl","createRelativesList","mentioningDate","wordHistory","historyElements","historyData","history","createHistoryList","meta","id","def","sn","dt","sdsense","additionData","syn_list","synonyms","rel_list","relatedWordGroups","additionDefinition","additionExample","synonymData","wd","synonym","relatedWordGroup","relatedWordData","relatedWord","parseDataFromThesaurusResponse","activeTextHandler","event","target","getAttribute","changeCurrentDictionary","header","header__logo","logo","header__title","inputBlock","appRoot__item","inputBlock__textarea","translationBlock","translationBlock__wrapper","dictionaryCardBlock","footer","footer__radioInput","footer__dictionarySwitchButton","join","dictionarySwitch","app","appRootContainer","ROOT","classList","add","appRoot","innerHTML"],"mappings":"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","file":"lexicon.20ed4f50.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nexport const getGoogleTranslateUrl = str => {\n  const getSymbolLessStr = str => str.replace(/[\\/#$%\\^&\\*{}\\_`~()]/g, '');\n  return process.env.REQUEST_TEXT + getSymbolLessStr(str);\n};\n\nexport const getMerriamWebsterUrl = (word, dictionary) => {\n  if (dictionary === \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\") {\n    return (\n      'https://www.dictionaryapi.com/api/v3/references/collegiate/json/' +\n      word +\n      '?key=' +\n      process.env.DICTIONARY_KEY_TEXT\n    );\n  } else {\n    return (\n      'https://www.dictionaryapi.com/api/v3/references/thesaurus/json/' +\n      word +\n      '?key=' +\n      process.env.THESAURUS_KEY_TEXT\n    );\n  }\n};\n","'use strict';\n\nimport { getGoogleTranslateUrl } from './utils.js';\nimport { getMerriamWebsterUrl } from './utils.js';\n\nimport styles from './styles.css';\n\nimport wmCover from './img/mw-cover_.svg';\nimport logo from './img/logo.svg';\n\nwindow.dataStore = {\n  dictionarySet: [\n    \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n    \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\",\n  ],\n  currentDictionary: \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n  currentInputtedText: '',\n  currentTranslation: 'There will be translation here...',\n  currentActiveText:\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\",\n  currentWord: undefined,\n  currentDictionaryCard: `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY</p>\n                          </div>`,\n  // isTranslationLoading: false,\n  // translationError: null,\n  // isWordDataLoading: false,\n  // wordDataError: null,\n};\n\nwindow.startApp = () => {\n  const inputValue = document.querySelector('#input').value;\n\n  if (inputValue !== '') {\n    window.dataStore.currentInputtedText = inputValue;\n\n    window.dataStore.currentTranslation = 'Loading... Please, wait!';\n    window.dataStore.currentActiveText = 'Loading... Please, wait!';\n\n    // window.textTranslationResults();\n    window.renderApp();\n  }\n};\n\nwindow.resetApp = () => {\n  window.dataStore.currentInputtedText = '';\n  window.dataStore.currentActiveText =\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\";\n  window.dataStore.currentTranslation = 'There will be translation here...';\n  window.dataStore.currentWord = undefined;\n  window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n  window.dataStore.isTranslationLoading = false;\n  window.dataStore.translationError = null;\n  window.dataStore.isWordDataLoading = false;\n  window.dataStore.wordDataError = null;\n  window.renderApp();\n};\n\nwindow.textTranslationResults = () => {\n  const getTranslationData = str => {\n    return fetch(getGoogleTranslateUrl(str)).then(response => response.json());\n  };\n\n  const parseTranslationData = data => {\n    let translationResult = '';\n    const [responseContent] = data;\n    responseContent.forEach(responseContentPart => {\n      const [translationPart] = responseContentPart;\n      translationResult += translationPart;\n    });\n    return translationResult;\n  };\n\n  const createActiveText = str => {\n    let html = `<div id=\"activeInputContent\"\n                   class=\"${styles.activeTextBlock}\"\n                   onclick=\"window.activeTextHandler(event)\">`;\n    str\n      .replace(/\\s{2,}/g, ' ')\n      .trim()\n      .split(' ')\n      .forEach(word => {\n        html += `<a href='#'\n                  class=\"${styles.activeTextBlock__word}\"\n                  data-value=\"${word}\">${word}</a> `;\n      });\n    html += '</div>';\n    return html;\n  };\n\n  // window.renderApp();\n\n  if (window.dataStore.currentInputtedText !== '') {\n    getTranslationData(window.dataStore.currentInputtedText)\n      .then(data => {\n        window.dataStore.isTranslationLoading = false;\n        window.dataStore.currentTranslation = parseTranslationData(data);\n        window.dataStore.currentActiveText = createActiveText(window.dataStore.currentInputtedText);\n      })\n      .catch(() => {\n        window.dataStore.currentTranslation = 'Some error occurred. Try again!';\n        window.dataStore.currentActiveText = 'Some error occurred. Try again!';\n      })\n      .finally(() => {\n        window.renderApp();\n      });\n  }\n\n  // let translationContent = '';\n  // let activeTextContent = '';\n\n  // if (window.dataStore.translationError !== null) {\n  //   translationContent = window.dataStore.translationError;\n  //   activeTextContent = window.dataStore.translationError;\n  // } else if (window.dataStore.isTranslationLoading === false) {\n  //   translationContent = window.dataStore.currentTranslation;\n  //   activeTextContent = window.dataStore.currentActiveText;\n  // } else {\n  //   translationContent = 'Loading... Please, wait!';\n  //   activeTextContent = window.dataStore.currentActiveText;\n  // }\n  // return `${translationBlock(translationContent)}\n  //         <br/>\n  //         ${activeTextBlock(activeTextContent)}`;\n};\n\nwindow.wordDataResults = () => {\n  const getWordData = (word, dictionary) => {\n    return fetch(getMerriamWebsterUrl(word, dictionary)).then(response => response.json());\n  };\n\n  const cleanText = str => {\n    let clearText = str\n      .replace(/({bc})/g, ': ')\n      .replace(/({wi})/g, '')\n      .replace(/({\\/wi})/g, '')\n      .replace(/({\\/it})/g, '')\n      .replace(/({it})/g, '')\n      .replace(/({dx})/g, '')\n      .replace(/({\\/dx})/g, '')\n      .replace(/({sc})/g, '')\n      .replace(/({\\/sc})/g, '')\n      .replace(/({dx_def}).+?({\\/dx_def})/g, '')\n      .replace(/({dx_ety}).+?({\\/dx_ety})/g, '')\n      .replace(/({ds).+?(\\|})/g, '')\n      .replace(/({dxt).+?(})/g, '')\n      .replace(/({ma}).+?({\\/ma})/g, '');\n\n    const hasLink = /({\\w+_link\\|).+?}/.test(clearText);\n    const hasNeedCapitalize = /({sx\\|).+?(\\|.{0,5}})/.test(clearText);\n    const hasReferenceToDefinition = /({ds\\|\\|).+?(\\|\\|})/.test(clearText);\n    const hasCrossReference = /({dxt\\|).+?(\\|\\|})/.test(clearText);\n\n    //Make text linkLess\n    if (hasLink) {\n      const [linkLessTarget] = clearText.match(/({\\w+_link\\|).+?}/);\n      const linkLessRes = linkLessTarget\n        .replace(/({\\w+_link\\|)/g, '')\n        .replace(/}/g, '')\n        .split('|')[0];\n      clearText = clearText.replace(/({\\w+_link\\|).+?}/, linkLessRes);\n    }\n\n    //Make text capitalized\n    if (hasNeedCapitalize) {\n      const [needCapitalize] = clearText.match(/({sx\\|).+?(\\|.{0,5}})/);\n      const capitalized = needCapitalize\n        .replace(/({sx\\|)/g, '')\n        .replace(/(\\|.{0,5}})/g, '')\n        .split('|')[0]\n        .toUpperCase();\n      clearText = clearText.replace(/({sx\\|).+?(\\|.{0,5}})/, capitalized);\n    }\n\n    // Add reference to definition\n    if (hasReferenceToDefinition) {\n      const [needReference] = clearText.match(/({ds\\|\\|).+?(\\|\\|})/);\n      const numberOfReference = needReference.replace(/({ds\\|\\|)/g, '').replace(/(\\|\\|})/g, '');\n      clearText = clearText.replace(\n        /({ds\\|\\|).+?(\\|\\|})/,\n        `, in the meaning defined at sense ${numberOfReference}`,\n      );\n    }\n\n    //Remove cross reference\n    if (hasCrossReference) {\n      const [needRemoveCrossReference] = clearText.match(/({dxt\\|).+?(\\|\\|})/);\n      const withoutCrossReference = needRemoveCrossReference\n        .replace(/({dxt\\|)/g, '')\n        .replace(/(\\|\\|})/g, '');\n      clearText = clearText.replace(/({dxt\\|).+?(\\|\\|})/, withoutCrossReference);\n    }\n\n    if (hasLink || hasNeedCapitalize || hasReferenceToDefinition || hasCrossReference) {\n      clearText = cleanText(clearText);\n    }\n\n    return clearText;\n  };\n\n  const parseDataFromCollegiateResponse = response => {\n    const changeAsteriskToDot = str => {\n      return str.replace(/\\*/g, '·​');\n    };\n\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n\n      let html = `<p class=\"${styles.wordCard__defListItem}\">`;\n\n      definitions.forEach(definitionData => {\n        if (definitionData['sn']) {\n          const definitionNumber = definitionData['sn'];\n          html += `<b class=\"${styles.wordCard__defListNum}\">${definitionNumber}</b>`;\n        }\n\n        if (definitionData['dt']) {\n          let definition = '';\n\n          definitionData['dt'].forEach(elem => {\n            definition = '';\n            if (elem[0] === 'text') {\n              definition += elem[1];\n            }\n            if (elem[0] === 'uns') {\n              definition += `<span class=\"${styles.wordCard__defExample}\">Note:</span> ${elem[1][0][0][1]}`;\n            }\n            if (definition.length !== 0) {\n              html += `${cleanText(definition)}</br>`;\n            }\n          });\n\n          let example = '';\n          definitionData['dt'].forEach(elem => {\n            example = '';\n            if (elem[0] === 'vis') {\n              const [{ t: exampleContent }] = elem[1];\n              example = exampleContent;\n            }\n            if (elem[0] === 'uns') {\n              elem[1].forEach(item => {\n                if (item[0] === 'vis') {\n                  example += `${item[0]}`;\n                }\n              });\n            }\n            if (example.length !== 0) {\n              html += `<i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i></br>`;\n            }\n          });\n        }\n      });\n      html += '</p>';\n      return html;\n    };\n\n    const createRelativesList = relatives => {\n      let html = '';\n      relatives.forEach(relativeData => {\n        const { ure: relativeWord, fl: wordGrammaticalFunction } = relativeData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n        <b class=\"${styles.wordCard__defListNum}\">${changeAsteriskToDot(\n          relativeWord,\n        )}</b> <i>${wordGrammaticalFunction}</i>\n        </p>`;\n      });\n      return html;\n    };\n\n    const createHistoryList = historyElements => {\n      let html = '';\n      historyElements.forEach(historyData => {\n        const [, history] = historyData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">${cleanText(history)}</p>`;\n      });\n      return html;\n    };\n\n    let result = `<div class=\"${styles.wordCard}\">`;\n\n    response.forEach(dataItem => {\n      const currentWord = dataItem['meta']['id'].split(':')[0];\n      let dataItemCard = '';\n\n      if (dataItem['meta']) {\n        dataItemCard += `<h3 class=\"${styles.wordCard__title}\">\n                          ${currentWord}`;\n      }\n\n      if (dataItem['fl']) {\n        const wordGrammaticalFunction = dataItem['fl'];\n        dataItemCard += `<i class=\"${styles.wordCard__grammatical}\">\n                        ${wordGrammaticalFunction}\n                        </i></h3>`;\n      } else {\n        dataItemCard += '</h3>';\n      }\n\n      if (dataItem['hwi']) {\n        const wordSyllables = dataItem['hwi']['hw'];\n        dataItemCard += `<p class=\"${styles.wordCard__wordSyllables}\">\n                          ${changeAsteriskToDot(wordSyllables)}`;\n        if (dataItem['hwi']['prs']) {\n          const [{ mw: wordTranscription }] = dataItem['hwi']['prs'];\n          dataItemCard += `<span class=\"${styles.wordCard__verticalDivider}\">|</span> \\\\ ${wordTranscription} \\\\`;\n        }\n        dataItemCard += '</p><hr>';\n      }\n\n      if (dataItem['meta']['stems']) {\n        const stemsArr = dataItem['meta']['stems'];\n        dataItemCard += ` <div>\n                            <p><b class=\"${styles.wordCard__defListNum}\">Variants: </b></p>`;\n        stemsArr.forEach(variant => {\n          dataItemCard += `<p>${cleanText(variant)}</p>`;\n        });\n        dataItemCard += `</div><hr>`;\n      }\n\n      if (dataItem['def']) {\n        const [{ sseq: definitionGroups }] = dataItem['def'];\n        dataItemCard += `<h4 class=\"${styles.wordCard__defTitle}\">\n                        Definition of <i>'${currentWord}'</i> :\n                        </h4>\n                        <div>${createDefList(definitionGroups)}</div>\n                        <hr>`;\n      }\n\n      if (dataItem['uros']) {\n        const relativesArr = dataItem['uros'];\n        dataItemCard += `<h4 class=\"${styles.wordCard__defTitle}\">\n                        Other Words from\n                        <i>'${currentWord}'</i> :\n                        </h4>\n                        <div>${createRelativesList(relativesArr)}</div>\n                        <hr>`;\n      }\n\n      if (dataItem['date']) {\n        const mentioningDate = dataItem['date'];\n        dataItemCard += `<div>\n                        <p><b class=\"${styles.wordCard__defListNum}\">First Known Use: </b></p>\n                        <p>${cleanText(mentioningDate)}.</p>\n                        </div>`;\n      }\n\n      if (dataItem['et']) {\n        const wordHistory = dataItem['et'];\n        dataItemCard += ` <div>\n                            <p><b class=\"${styles.wordCard__defListNum}\">Etymology: </b></p>\n                            <p>${createHistoryList(wordHistory)}</p>\n                          </div>\n                          <hr>`;\n      }\n      dataItemCard += '<hr>';\n      result += dataItemCard;\n    });\n\n    result += '</div>';\n    return result;\n  };\n\n  const parseDataFromThesaurusResponse = response => {\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n      let html = '';\n\n      definitions.forEach(definitionData => {\n        const {\n          sn: definitionNumber = '',\n          dt: [[, definition], [, [{ t: example }]] = [, [{ t: 'no example' }]]],\n          sdsense: additionData,\n          syn_list: [synonyms],\n          rel_list: relatedWordGroups,\n        } = definitionData;\n\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n                  <b>${definitionNumber}</b>\n                  ${cleanText(definition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i>\n                </p>`;\n\n        if (additionData) {\n          const {\n            dt: [[, additionDefinition], [, [{ t: additionExample }]] = [, [{ t: 'no example' }]]],\n          } = additionData;\n          html += `<p class=\"${styles.wordCard__defListItem}\">\n                  also ${cleanText(additionDefinition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(additionExample)}</i>\n                </p>`;\n        }\n\n        html += `<hr>\n                <h4>Synonyms:</h4>\n                <ul>`;\n        synonyms.forEach(synonymData => {\n          const { wd: synonym } = synonymData;\n          html += `<li>${synonym}</li>`;\n        });\n        html += `</ul>`;\n\n        html += `<hr>\n                <h4>Related words:</h4>\n                <ul>`;\n        relatedWordGroups.forEach(relatedWordGroup => {\n          html += `<ul>`;\n          relatedWordGroup.forEach(relatedWordData => {\n            const { wd: relatedWord } = relatedWordData;\n            html += `<li>${relatedWord}</li>`;\n          });\n          html += `</ul>`;\n        });\n        html += `</ul>`;\n      });\n      return html;\n    };\n\n    // console.log(response);\n\n    const {\n      meta: { id: currentWord },\n      fl: wordGrammaticalFunction,\n      def: [{ sseq: definitionGroups }],\n    } = response;\n\n    return `<div class=\"${styles.wordCard}\">\n              <h3 class=\"${styles.wordCard__title}\">\n                ${currentWord}\n                <i class=\"${styles.wordCard__grammatical}\">\n                ${wordGrammaticalFunction}\n                </i>\n              </h3>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Definition of <i>'${currentWord}'</i> :\n              </h4>\n              <div>${createDefList(definitionGroups)}</div>\n              <hr>\n\n              </div>`;\n  };\n\n  // window.renderApp();\n\n  getWordData(window.dataStore.currentWord, window.dataStore.currentDictionary)\n    .then(data => {\n      window.dataStore.isWordDataLoading = false;\n\n      if (window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\") {\n        window.dataStore.currentDictionaryCard = parseDataFromCollegiateResponse(data);\n      } else if (window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\") {\n        window.dataStore.currentDictionaryCard = parseDataFromThesaurusResponse(data);\n      }\n    })\n    .catch(() => {\n      currentDictionaryCard = 'Some error occurred. Try again!';\n    })\n    .finally(() => {\n      window.renderApp();\n    });\n};\n\nwindow.activeTextHandler = event => {\n  if (\n    event.target.getAttribute('data-value') !== null &&\n    event.target.getAttribute('data-value') !== undefined\n  ) {\n    window.dataStore.currentDictionaryCard = 'Loading... Please, wait!';\n    window.dataStore.currentWord = event.target.getAttribute('data-value');\n    // window.wordDataResults();\n    window.renderApp();\n  }\n};\n\nwindow.changeCurrentDictionary = value => {\n  if (window.dataStore.currentWord === undefined) {\n    window.dataStore.currentDictionary = value;\n    window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n    window.renderApp();\n  } else {\n    window.dataStore.currentDictionary = value;\n    window.dataStore.currentDictionaryCard = 'Loading... Please, wait!';\n    window.renderApp();\n  }\n};\n\n// window.setCurrentDictionaryCard = () => {\n//   window.dataStore.currentDictionaryCard = getWordData(\n//     window.dataStore.currentWord,\n//     window.dataStore.currentDictionary,\n//   );\n// };\n\nconst header = () => {\n  return `<header class=\"${styles.header}\">\n      <a href=\"#\"><img class=\"${styles.header__logo}\" src=\"${logo}\" alt=\"logo\" /></a>\n      <h1 class=\"${styles.header__title}\">Lexicon</h1>\n    </header>`;\n};\n\nconst inputBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n  <textarea\n  id=\"input\"\n    class=\"${styles.inputBlock__textarea}\"\n    rows=\"10\"\n    cols=\"50\"\n    placeholder=\"Write or paste your text here.\">${window.dataStore.currentInputtedText}</textarea>\n  <button onclick=\"window.startApp();\"\n  >Translate</button>\n  <button onclick=\"window.resetApp();\">\n    Clear\n  </button>\n  </div>`;\n};\n\nconst translationBlock = () => {\n  return `<div id=\"output\" class=\"${styles.appRoot__item} ${styles.translationBlock}\">\n            <div class=\"${styles.translationBlock__wrapper}\">${window.dataStore.currentTranslation}</div>\n          </div>`;\n};\n\nconst activeTextBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n    ${window.dataStore.currentActiveText}\n  </div>`;\n};\n\nconst dictionaryCardBlock = () => {\n  return `<div id=\"dictionaryCardBlock\" class=\"${styles.appRoot__item} ${styles.dictionaryCardBlock}\">${window.dataStore.currentDictionaryCard}</div>`;\n};\n\nconst footer = () => {\n  const dictionarySwitch = () => {\n    return window.dataStore.dictionarySet\n      .map(dictionary => {\n        return `<label>\n                <input\n                class=\"${styles.footer__radioInput}\"\n                type=\"radio\"\n                value=\"${dictionary}\"\n                name=\"dictionary\"\n                ${dictionary === window.dataStore.currentDictionary ? 'checked' : ''}\n                onchange=\"changeCurrentDictionary(this.value); window.renderApp()\"\n                />\n                <span class=\"${styles.footer__dictionarySwitchButton}\">${dictionary}</span>\n              </label>`;\n      })\n      .join('');\n  };\n  return `<footer class=\"${styles.footer}\">\n  ${dictionarySwitch()}\n  </footer>`;\n};\n\n// const wordDataResults = () => {\n//   let wordDataContent = '';\n\n//   if (window.dataStore.wordDataError !== null) {\n//     wordDataContent = window.dataStore.wordDataError;\n//   } else if (window.dataStore.isTranslationLoading === false) {\n//     wordDataContent = window.dataStore.currentDictionaryCard;\n//   } else {\n//     wordDataContent = 'Loading... Please, wait!';\n//   }\n//   return `${dictionaryCardBlock(wordDataContent)}`;\n// };\n\nconst app = () => {\n  return `<div class=\"${styles.appRootContainer}\">\n  ${header()}\n  ${inputBlock()}\n  ${translationBlock()}\n  ${activeTextBlock()}\n  ${dictionaryCardBlock()}\n  ${footer()}\n  </div>`;\n};\n\nconst ROOT = document.querySelector('#app-root');\n\nwindow.renderApp = () => {\n  ROOT.classList.add(`${styles.appRoot}`);\n  ROOT.innerHTML = app();\n  if (window.dataStore.currentInputtedText !== '') {\n    window.textTranslationResults();\n  }\n  if (window.dataStore.currentWord !== undefined) {\n    window.wordDataResults();\n  }\n};\n\nwindow.renderApp();\n"]}