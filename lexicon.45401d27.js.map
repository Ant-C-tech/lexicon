{"version":3,"sources":["translation-responses.js","word-information-collegiate-responses.js","utils.js","index.js"],"names":["translationResponses","apple","voluminous","wordInformationCollegiateResponse","meta","id","uuid","sort","src","section","stems","offensive","hwi","hw","prs","mw","sound","audio","ref","stat","fl","def","sseq","sn","dt","t","sdsense","sd","uros","ure","et","date","ld_link","link_hw","link_fl","suppl","examples","ldq","ldhw","sls","shortdef","createActiveText","str","html","replace","trim","split","forEach","word","styles","activeTextBlock__word","getTranslation","parseDataFromTranslationResponse","data","parseDataFromWordInformationResponse","clearText","currentWord","wordGrammaticalFunction","wordSyllables","wordTranscription","wordCard","wordCard__title","wordCard__grammatical","wordCard__headword","wordCard__verticalDivider","wordCard__defTitle","definitionGroup","definition","definitionNumber","definitionContent","definitionExample","length","wordCard__defListItem","wordCard__defListNum","wordCard__defExample","createDefList","getWordInformation","punctuationLessWord","window","dataStore","dictionarySet","type","name","currentDictionary","currentText","header","header__logo","logo","header__title","inputTextBlock","appRoot__item","inputTextBlock__textarea","outputTextBlock","activeTextBlock","dictionaryCardBlock","dictionaryCardBlock__cover","wmCover","dictionarySwitch","map","dictionary","footer__radioInput","footer__dictionarySwitchButton","join","footer","app","ROOT","document","querySelector","renderApp","classList","add","appRoot","innerHTML"],"mappings":"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","file":"lexicon.45401d27.js","sourceRoot":"..","sourcesContent":["'use strict';\nexport const translationResponses = {\n  apple: [[['яблоко', 'apple', null, null, 10]], null, 'en', null, null, null, null, []],\n  voluminous: [\n    [['объемный', 'voluminous', null, null, 10]],\n    null,\n    'en',\n    null,\n    null,\n    null,\n    null,\n    [],\n  ],\n};\n","'use strict';\nexport const wordInformationCollegiateResponse = {\n  meta: {\n    id: 'voluminous',\n    uuid: '0d01b967-971f-4ec5-8fe0-10513d29c39b',\n    sort: '220130400',\n    src: 'collegiate',\n    section: 'alpha',\n    stems: ['voluminous', 'voluminously', 'voluminousness', 'voluminousnesses'],\n    offensive: false,\n  },\n  hwi: {\n    hw: 'vo*lu*mi*nous',\n    prs: [\n      {\n        mw: 'v\\u0259-\\u02c8l\\u00fc-m\\u0259-n\\u0259s',\n        sound: {\n          audio: 'volumi02',\n          ref: 'c',\n          stat: '1',\n        },\n      },\n    ],\n  },\n  fl: 'adjective',\n  def: [\n    {\n      sseq: [\n        [\n          [\n            'sense',\n            {\n              sn: '1 a',\n              dt: [\n                ['text', '{bc}having or marked by great {a_link|volume} or bulk {bc}{sx|large||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'long {wi}voluminous{/wi} tresses',\n                    },\n                  ],\n                ],\n              ],\n              sdsense: {\n                sd: 'also',\n                dt: [\n                  ['text', '{bc}{sx|full||} '],\n                  [\n                    'vis',\n                    [\n                      {\n                        t: 'a {wi}voluminous{/wi} skirt',\n                      },\n                    ],\n                  ],\n                ],\n              },\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}{sx|numerous||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'trying to keep track of {wi}voluminous{/wi} slips of paper',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '2 a',\n              dt: [\n                [\n                  'text',\n                  '{bc}filling or capable of filling a large volume or several {a_link|volumes} ',\n                ],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} literature on the subject',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}writing or speaking much or at great length '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} correspondent',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '3',\n              dt: [\n                ['text', '{bc}consisting of many folds, coils, or convolutions {bc}{sx|winding||}'],\n              ],\n            },\n          ],\n        ],\n      ],\n    },\n  ],\n  uros: [\n    {\n      ure: 'vo*lu*mi*nous*ly',\n      fl: 'adverb',\n    },\n    {\n      ure: 'vo*lu*mi*nous*ness',\n      fl: 'noun',\n    },\n  ],\n  et: [['text', 'Late Latin {it}voluminosus{/it}, from Latin {it}volumin-, volumen{/it}']],\n  date: '1611{ds||3||}',\n  ld_link: {\n    link_hw: 'voluminous',\n    link_fl: 'adjective',\n  },\n  suppl: {\n    examples: [\n      {\n        t: 'the building\\u0027s high ceilings and {it}voluminous{/it} spaces',\n      },\n      {\n        t: 'a writer of {it}voluminous{/it} output',\n      },\n    ],\n    ldq: {\n      ldhw: 'voluminous',\n      fl: 'adjective',\n      def: [\n        {\n          sls: ['formal'],\n          sseq: [\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}very large {bc}containing a lot of space']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  sls: ['of clothing'],\n                  dt: [['text', '{bc}using large amounts of fabric {bc}very full']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}having very many words or pages']],\n                },\n              ],\n            ],\n          ],\n        },\n      ],\n    },\n  },\n  shortdef: [\n    'having or marked by great volume or bulk : large; also : full',\n    'numerous',\n    'filling or capable of filling a large volume or several volumes',\n  ],\n};\n","'use strict';\n\nimport { translationResponses } from './translation-responses.js';\nimport { wordInformationCollegiateResponse } from './word-information-collegiate-responses.js';\nimport styles from './styles.css';\n\nexport const createActiveText = str => {\n  let html = '<div id=\"activeInputContent\" class=\"${styles.appRoot__item}\">';\n  str\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n    .split(' ')\n    .forEach(word => {\n      html += `<a href='#' class=\"${styles.activeTextBlock__word}\" data-word=${word} onclick=\"document.querySelector('#dictionaryCardOutput').innerHTML=window.getWordInformation('${word}')\">${word}</a> `;\n    });\n  html += '</div>';\n  return html;\n};\n\nexport const getTranslation = str => {\n  if (translationResponses[str]) {\n    return parseDataFromTranslationResponse(translationResponses[str]);\n  } else {\n    return 'Я переведу тебе это в своей следующей версии.';\n  }\n};\n\nconst parseDataFromTranslationResponse = data => {\n  return data[0][0][0]\n    .replace(/\\s*<\\s*>/g, '.')\n    .replace(/\\s*<\\s*1\\s*>/g, '!')\n    .replace(/\\s*<\\s*3\\s*>/g, '<br>')\n    .replace(/\\s*<\\s*2\\s*>/g, '?');\n};\n\nconst parseDataFromWordInformationResponse = wordInformationCollegiateResponse => {\n  const clearText = str => {\n    return str\n      .replace(/({bc})/g, ':')\n      .replace(/a_link|/g, '')\n      .replace(/sx|/g, '')\n      .replace(/{wi}/g, '')\n      .replace(/{\\/wi}/g, '')\n      .replace(/[{}|]/g, '');\n  };\n\n  const createDefList = () => {\n    let html = '';\n    wordInformationCollegiateResponse['def']['0']['sseq'].forEach(definitionGroup => {\n      definitionGroup.forEach(definition => {\n        const definitionNumber = definition[1]['sn'];\n        const definitionContent = definition[1]['dt'][0][1];\n        const definitionExample =\n          definition[1]['dt'].length > 1 ? definition[1]['dt'][1][1][0]['t'] : 'no example';\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n        <b class=\"${styles.wordCard__defListNum}\">${definitionNumber}</b>\n         ${clearText(definitionContent)}</br>\n         <i class=\"${styles.wordCard__defExample}\">// ${clearText(definitionExample)}</i>\n         </p><hr>`;\n      });\n    });\n    return html;\n  };\n\n  const currentWord = wordInformationCollegiateResponse['meta']['id'];\n  const wordGrammaticalFunction = wordInformationCollegiateResponse['fl'];\n  const wordSyllables = wordInformationCollegiateResponse['hwi']['hw'];\n  const wordTranscription = wordInformationCollegiateResponse['hwi']['prs'][0]['mw'];\n\n  return `<div class=\"${styles.wordCard}\">\n  <h3 class=\"${styles.wordCard__title}\">${currentWord} <i class=\"${\n    styles.wordCard__grammatical\n  }\">${wordGrammaticalFunction}</i></h3>\n  <p class=\"${styles.wordCard__headword}\">\n  ${wordSyllables.replace(/\\*/g, '·​')}\n  <span class=\"${styles.wordCard__verticalDivider}\">|</span>\\\\ ${wordTranscription} \\\\ </p>\n  <h4 class=\"${styles.wordCard__defTitle}\">Definition of <i>'${currentWord}'</i></h4>\n  <div>${createDefList()}</div>\n  </div>`;\n};\n\nexport const getWordInformation = word => {\n  const punctuationLessWord = word.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()?]/g, '');\n  if (wordInformationCollegiateResponse['meta']['id'] === punctuationLessWord) {\n    return parseDataFromWordInformationResponse(wordInformationCollegiateResponse);\n  } else {\n    return `<div class=\"${styles.wordCard}\">We do not have any information about word \"${punctuationLessWord}\" yet...</div>`;\n  }\n};\n\n// let punctuationLess = str.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()?]/g, '');\n","'use strict';\n\nimport { getTranslation } from './utils.js';\nimport { createActiveText } from './utils.js';\nimport { getWordInformation } from './utils.js';\nimport styles from './styles.css';\nimport wmCover from './img/mw-cover.jpg';\nimport logo from './img/logo.svg';\n\nwindow.dataStore = {\n  dictionarySet: [\n    { type: 'collegiate', name: \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\" },\n    { type: 'lerner', name: \"MERRIAM-WEBSTER'S LEARNER'S DICTIONARY\" },\n  ],\n  currentDictionary: 'collegiate',\n  currentText: '',\n};\n\nwindow.getTranslation = getTranslation;\nwindow.createActiveText = createActiveText;\nwindow.getWordInformation = getWordInformation;\n\nconst header = () => {\n  return `<header class=\"${styles.header}\">\n      <a href=\"#\"><img class=\"${styles.header__logo}\" src=\"${logo}\" alt=\"logo\" /></a>\n      <h1 class=\"${styles.header__title}\">Lexicon</h1>\n    </header>`;\n};\n\nconst inputTextBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n  <textarea\n  id=\"input\"\n    class=\"${styles.inputTextBlock__textarea}\"\n    rows=\"10\"\n    cols=\"50\"\n    placeholder=\"Write or paste your text here.\nIn this version you can work with word 'voluminous'. Have a productive work!\"\n  ></textarea>\n  <button\n  onclick=\"window.dataStore.currentText = document.querySelector('#input').value;\n  window.renderApp();\n  document.querySelector('#input').value = window.dataStore.currentText;\n  document.querySelector('#output').innerHTML=window.getTranslation(window.dataStore.currentText);\n  document.querySelector('#activeInput').innerHTML=window.createActiveText(window.dataStore.currentText)\"\n  >Translate</button>\n  <button\n  onclick=\"window.dataStore.currentText=''; window.renderApp()\"\n  >Clear</button>\n  </div>`;\n};\nconst outputTextBlock = () => {\n  return `<div id=\"output\" class=\"${styles.appRoot__item}\">There will be Your translation here...</div>`;\n};\nconst activeTextBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n    <div id=\"activeInput\" class=\"${styles.activeTextBlock}\">\n    There will be Your clickable original text here...\n    </div>\n  </div>`;\n};\nconst dictionaryCardBlock = () => {\n  return `<div id=\"dictionaryCardOutput\" class=\"${styles.appRoot__item} ${styles.dictionaryCardBlock}\">\n  <div>\n    <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n  </div>\n  </div>`;\n};\n\nconst dictionarySwitch = currentDictionary => {\n  return window.dataStore.dictionarySet\n    .map(dictionary => {\n      return `<label>\n                <input\n                class=\"${styles.footer__radioInput}\"\n                type=\"radio\"\n                id=\"${dictionary['type']}\"\n                value=\"${dictionary['type']}\"\n                name=\"dictionary\"\n                ${dictionary['type'] === window.dataStore.currentDictionary ? 'checked' : ''}\n                onchange=\"window.dataStore.currentDictionary = this.value\"\n                />\n                <span class=\"${styles.footer__dictionarySwitchButton}\">${dictionary['name']}</span>\n              </label>`;\n    })\n    .join('');\n};\n\nconst footer = () => {\n  return `<footer class=\"${styles.footer}\">\n  ${dictionarySwitch()}\n  </footer>`;\n};\n\nconst app = () => {\n  return `\n  ${header()}\n  ${inputTextBlock()}\n  <br/>\n  ${outputTextBlock()}\n  <br/>\n  ${activeTextBlock()}\n  <br/>\n  ${dictionaryCardBlock()}\n  ${footer()}\n  `;\n};\n\nconst ROOT = document.querySelector('#app-root');\n\nwindow.renderApp = () => {\n  ROOT.classList.add(`${styles.appRoot}`);\n  ROOT.innerHTML = app();\n};\n\nrenderApp();\n"]}