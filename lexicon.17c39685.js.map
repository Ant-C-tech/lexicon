{"version":3,"sources":["collegiate-responses.js","thesaurus-responses.js","utils.js","index.js"],"names":["collegiateResponse","meta","id","uuid","sort","src","section","stems","offensive","hwi","hw","prs","mw","sound","audio","ref","stat","fl","def","sseq","sn","dt","t","sdsense","sd","uros","ure","et","date","ld_link","link_hw","link_fl","suppl","examples","ldq","ldhw","sls","shortdef","thesaurusResponse","target","tuuid","tsrc","syns","ants","syn_list","wd","rel_list","getGoogleTranslateUrl","str","replace","getSymbolLessStr","getMerriamWebsterUrl","word","dictionary","window","dataStore","dictionarySet","currentDictionary","currentInputtedText","currentTranslation","currentActiveText","currentWord","undefined","currentDictionaryCard","styles","dictionaryCardBlock__cover","wmCover","dictionaryCardBlock__coverTitle","isTranslationLoading","translationError","isWordDataLoading","wordDataError","startApp","inputValue","document","querySelector","value","renderApp","fetch","then","response","json","getTranslationData","data","translationResult","responseContent","forEach","responseContentPart","translationPart","parseTranslationData","createActiveText","catch","finally","resetApp","activeTextHandler","event","getWordData","cleanText","clearText","hasLink","test","hasNeedCapitalize","hasReferenceToDefinition","hasCrossReference","linkLessTarget","match","linkLessRes","split","needCapitalize","capitalized","toUpperCase","needReference","numberOfReference","needRemoveCrossReference","withoutCrossReference","parseDataFromCollegiateResponse","changeAsteriskToDot","result","wordCard","dataItem","dataItemCard","wordCard__title","wordGrammaticalFunction","wordCard__grammatical","wordSyllables","wordCard__wordSyllables","wordTranscription","wordCard__verticalDivider","stemsArr","wordCard__defListNum","variant","definitionGroups","wordCard__defTitle","definitions","flat","map","definitionItem","definition","html","wordCard__defListItem","definitionData","definitionNumber","elem","wordCard__defExample","length","example","exampleContent","item","createDefList","relativesArr","relatives","relativeData","relativeWord","createRelativesList","mentioningDate","wordHistory","historyElements","historyData","history","createHistoryList","getAttribute","additionData","synonyms","relatedWordGroups","additionDefinition","additionExample","synonymData","synonym","relatedWordGroup","relatedWordData","relatedWord","parseDataFromThesaurusResponse","changeCurrentDictionary","setCurrentDictionaryCard","activeTextBlock","trim","activeTextBlock__word","header","header__logo","logo","header__title","inputBlock","appRoot__item","inputBlock__textarea","footer","footer__radioInput","footer__dictionarySwitchButton","join","dictionarySwitch","textTranslationResults","translationContent","activeTextContent","content","translationBlock","translationBlock__wrapper","wordDataResults","wordDataContent","dictionaryCardBlock","app","appRootContainer","ROOT","classList","add","appRoot","innerHTML"],"mappings":"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","file":"lexicon.17c39685.js","sourceRoot":"..","sourcesContent":["'use strict';\nexport const collegiateResponse = {\n  meta: {\n    id: 'voluminous',\n    uuid: '0d01b967-971f-4ec5-8fe0-10513d29c39b',\n    sort: '220130400',\n    src: 'collegiate',\n    section: 'alpha',\n    stems: ['voluminous', 'voluminously', 'voluminousness', 'voluminousnesses'],\n    offensive: false,\n  },\n  hwi: {\n    hw: 'vo*lu*mi*nous',\n    prs: [\n      {\n        mw: 'v\\u0259-\\u02c8l\\u00fc-m\\u0259-n\\u0259s',\n        sound: {\n          audio: 'volumi02',\n          ref: 'c',\n          stat: '1',\n        },\n      },\n    ],\n  },\n  fl: 'adjective',\n  def: [\n    {\n      sseq: [\n        [\n          [\n            'sense',\n            {\n              sn: '1 a',\n              dt: [\n                ['text', '{bc}having or marked by great {a_link|volume} or bulk {bc}{sx|large||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'long {wi}voluminous{/wi} tresses',\n                    },\n                  ],\n                ],\n              ],\n              sdsense: {\n                sd: 'also',\n                dt: [\n                  ['text', '{bc}{sx|full||} '],\n                  [\n                    'vis',\n                    [\n                      {\n                        t: 'a {wi}voluminous{/wi} skirt',\n                      },\n                    ],\n                  ],\n                ],\n              },\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}{sx|numerous||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'trying to keep track of {wi}voluminous{/wi} slips of paper',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '2 a',\n              dt: [\n                [\n                  'text',\n                  '{bc}filling or capable of filling a large volume or several {a_link|volumes} ',\n                ],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} literature on the subject',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}writing or speaking much or at great length '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} correspondent',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '3',\n              dt: [\n                ['text', '{bc}consisting of many folds, coils, or convolutions {bc}{sx|winding||}'],\n              ],\n            },\n          ],\n        ],\n      ],\n    },\n  ],\n  uros: [\n    {\n      ure: 'vo*lu*mi*nous*ly',\n      fl: 'adverb',\n    },\n    {\n      ure: 'vo*lu*mi*nous*ness',\n      fl: 'noun',\n    },\n  ],\n  et: [['text', 'Late Latin {it}voluminosus{/it}, from Latin {it}volumin-, volumen{/it}']],\n  date: '1611{ds||3||}',\n  ld_link: {\n    link_hw: 'voluminous',\n    link_fl: 'adjective',\n  },\n  suppl: {\n    examples: [\n      {\n        t: 'the building\\u0027s high ceilings and {it}voluminous{/it} spaces',\n      },\n      {\n        t: 'a writer of {it}voluminous{/it} output',\n      },\n    ],\n    ldq: {\n      ldhw: 'voluminous',\n      fl: 'adjective',\n      def: [\n        {\n          sls: ['formal'],\n          sseq: [\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}very large {bc}containing a lot of space']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  sls: ['of clothing'],\n                  dt: [['text', '{bc}using large amounts of fabric {bc}very full']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}having very many words or pages']],\n                },\n              ],\n            ],\n          ],\n        },\n      ],\n    },\n  },\n  shortdef: [\n    'having or marked by great volume or bulk : large; also : full',\n    'numerous',\n    'filling or capable of filling a large volume or several volumes',\n  ],\n};\n","'use strict';\nexport const thesaurusResponse = {\n  meta: {\n    id: 'umpire',\n    uuid: '1c8533d7-23e6-4c3b-9c48-854066e8caff',\n    src: 'coll_thes',\n    section: 'alpha',\n    target: {\n      tuuid: '897edcad-2e88-4ab7-b81b-170ddf8eb4ec',\n      tsrc: 'collegiate',\n    },\n    stems: ['umpire', 'umpires'],\n    syns: [['adjudicator', 'arbiter', 'arbitrator', 'judge', 'referee']],\n    ants: [],\n    offensive: false,\n  },\n  hwi: {\n    hw: 'umpire',\n  },\n  fl: 'noun',\n  def: [\n    {\n      sseq: [\n        [\n          [\n            'sense',\n            {\n              dt: [\n                ['text', 'a person who impartially decides or resolves a dispute or controversy '],\n                [\n                  'vis',\n                  [\n                    {\n                      t:\n                        'usually acts as {it}umpire{/it} in the all-too-frequent squabbles between the two other roommates',\n                    },\n                  ],\n                ],\n              ],\n              syn_list: [\n                [\n                  {\n                    wd: 'adjudicator',\n                  },\n                  {\n                    wd: 'arbiter',\n                  },\n                  {\n                    wd: 'arbitrator',\n                  },\n                  {\n                    wd: 'judge',\n                  },\n                  {\n                    wd: 'referee',\n                  },\n                ],\n              ],\n              rel_list: [\n                [\n                  {\n                    wd: 'jurist',\n                  },\n                  {\n                    wd: 'justice',\n                  },\n                  {\n                    wd: 'magistrate',\n                  },\n                ],\n                [\n                  {\n                    wd: 'intermediary',\n                  },\n                  {\n                    wd: 'intermediate',\n                  },\n                  {\n                    wd: 'mediator',\n                  },\n                  {\n                    wd: 'mediatrix',\n                  },\n                  {\n                    wd: 'moderator',\n                  },\n                  {\n                    wd: 'negotiator',\n                  },\n                ],\n                [\n                  {\n                    wd: 'conciliator',\n                  },\n                  {\n                    wd: 'go-between',\n                  },\n                  {\n                    wd: 'peacemaker',\n                  },\n                  {\n                    wd: 'reconciler',\n                  },\n                  {\n                    wd: 'troubleshooter',\n                  },\n                ],\n                [\n                  {\n                    wd: 'decider',\n                  },\n                ],\n              ],\n            },\n          ],\n        ],\n      ],\n    },\n  ],\n  shortdef: ['a person who impartially decides or resolves a dispute or controversy'],\n};\n","'use strict';\n\nexport const getGoogleTranslateUrl = str => {\n  const getSymbolLessStr = str => str.replace(/[\\/#$%\\^&\\*{}\\_`~()]/g, '');\n  return process.env.REQUEST_TEXT + getSymbolLessStr(str);\n};\n\nexport const getMerriamWebsterUrl = (word, dictionary) => {\n  if (dictionary === \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\") {\n    return (\n      'https://www.dictionaryapi.com/api/v3/references/collegiate/json/' +\n      word +\n      '?key=' +\n      process.env.DICTIONARY_KEY_TEXT\n    );\n  } else {\n    return (\n      'https://www.dictionaryapi.com/api/v3/references/thesaurus/json/' +\n      word +\n      '?key=' +\n      process.env.THESAURUS_KEY_TEXT\n    );\n  }\n};\n","'use strict';\n\nimport { collegiateResponse } from './collegiate-responses.js';\nimport { thesaurusResponse } from './thesaurus-responses.js';\nimport { getGoogleTranslateUrl } from './utils.js';\nimport { getMerriamWebsterUrl } from './utils.js';\n\nimport styles from './styles.css';\n\nimport wmCover from './img/mw-cover_.svg';\nimport logo from './img/logo.svg';\n\nwindow.dataStore = {\n  dictionarySet: [\n    \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n    \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\",\n  ],\n  currentDictionary: \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n  currentInputtedText: '',\n  currentTranslation: 'There will be translation here...',\n  currentActiveText:\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\",\n  currentWord: undefined,\n  currentDictionaryCard: `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY</p>\n                          </div>`,\n  isTranslationLoading: false,\n  translationError: null,\n  isWordDataLoading: false,\n  wordDataError: null,\n};\n\nwindow.startApp = () => {\n  const inputValue = document.querySelector('#input').value;\n\n  const getTranslationData = str => {\n    return fetch(getGoogleTranslateUrl(str)).then(response => response.json());\n  };\n\n  const parseTranslationData = data => {\n    let translationResult = '';\n    const [responseContent] = data;\n    responseContent.forEach(responseContentPart => {\n      const [translationPart] = responseContentPart;\n      translationResult += translationPart;\n    });\n    return translationResult;\n  };\n\n  if (inputValue !== '') {\n    window.dataStore.isTranslationLoading = true;\n    window.dataStore.translationError = null;\n    window.dataStore.currentInputtedText = inputValue;\n    window.renderApp();\n\n    getTranslationData(window.dataStore.currentInputtedText)\n      .then(data => {\n        window.dataStore.isTranslationLoading = false;\n        window.dataStore.currentTranslation = parseTranslationData(data);\n        window.dataStore.currentActiveText = window.createActiveText(\n          window.dataStore.currentInputtedText,\n        );\n      })\n      .catch(() => {\n        window.dataStore.translationError = 'Some error occurred. Try again!';\n      })\n      .finally(() => {\n        window.renderApp();\n      });\n  }\n};\n\nwindow.resetApp = () => {\n  window.dataStore.currentInputtedText = '';\n  window.dataStore.currentActiveText =\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\";\n  window.dataStore.currentTranslation = 'There will be translation here...';\n  window.dataStore.currentWord = undefined;\n  window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n  window.dataStore.isTranslationLoading = false;\n  window.dataStore.translationError = null;\n  window.dataStore.isWordDataLoading = false;\n  window.dataStore.wordDataError = null;\n  window.renderApp();\n};\n\nwindow.activeTextHandler = event => {\n  const getWordData = (word, dictionary) => {\n    return fetch(getMerriamWebsterUrl(word, dictionary)).then(response => response.json());\n  };\n\n  const cleanText = str => {\n    let clearText = str\n      .replace(/({bc})/g, ': ')\n      .replace(/({wi})/g, '')\n      .replace(/({\\/wi})/g, '')\n      .replace(/({\\/it})/g, '')\n      .replace(/({it})/g, '')\n      .replace(/({dx})/g, '')\n      .replace(/({\\/dx})/g, '')\n      .replace(/({sc})/g, '')\n      .replace(/({\\/sc})/g, '')\n      .replace(/({dx_def}).+?({\\/dx_def})/g, '')\n      .replace(/({dx_ety}).+?({\\/dx_ety})/g, '')\n      .replace(/({ds).+?(\\|})/g, '')\n      .replace(/({dxt).+?(})/g, '')\n      .replace(/({ma}).+?({\\/ma})/g, '');\n\n    const hasLink = /({\\w+_link\\|).+?}/.test(clearText);\n    const hasNeedCapitalize = /({sx\\|).+?(\\|.{0,5}})/.test(clearText);\n    const hasReferenceToDefinition = /({ds\\|\\|).+?(\\|\\|})/.test(clearText);\n    const hasCrossReference = /({dxt\\|).+?(\\|\\|})/.test(clearText);\n\n    //Make text linkLess\n    if (hasLink) {\n      const [linkLessTarget] = clearText.match(/({\\w+_link\\|).+?}/);\n      const linkLessRes = linkLessTarget\n        .replace(/({\\w+_link\\|)/g, '')\n        .replace(/}/g, '')\n        .split('|')[0];\n      clearText = clearText.replace(/({\\w+_link\\|).+?}/, linkLessRes);\n    }\n\n    //Make text capitalized\n    if (hasNeedCapitalize) {\n      const [needCapitalize] = clearText.match(/({sx\\|).+?(\\|.{0,5}})/);\n      const capitalized = needCapitalize\n        .replace(/({sx\\|)/g, '')\n        .replace(/(\\|.{0,5}})/g, '')\n        .split('|')[0]\n        .toUpperCase();\n      clearText = clearText.replace(/({sx\\|).+?(\\|.{0,5}})/, capitalized);\n    }\n\n    // Add reference to definition\n    if (hasReferenceToDefinition) {\n      const [needReference] = clearText.match(/({ds\\|\\|).+?(\\|\\|})/);\n      const numberOfReference = needReference.replace(/({ds\\|\\|)/g, '').replace(/(\\|\\|})/g, '');\n      clearText = clearText.replace(\n        /({ds\\|\\|).+?(\\|\\|})/,\n        `, in the meaning defined at sense ${numberOfReference}`,\n      );\n    }\n\n    //Remove cross reference\n    if (hasCrossReference) {\n      const [needRemoveCrossReference] = clearText.match(/({dxt\\|).+?(\\|\\|})/);\n      const withoutCrossReference = needRemoveCrossReference\n        .replace(/({dxt\\|)/g, '')\n        .replace(/(\\|\\|})/g, '');\n      clearText = clearText.replace(/({dxt\\|).+?(\\|\\|})/, withoutCrossReference);\n    }\n\n    if (hasLink || hasNeedCapitalize || hasReferenceToDefinition || hasCrossReference) {\n      clearText = cleanText(clearText);\n    }\n\n    return clearText;\n  };\n\n  const parseDataFromCollegiateResponse = response => {\n    const changeAsteriskToDot = str => {\n      return str.replace(/\\*/g, '·​');\n    };\n\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n\n      let html = `<p class=\"${styles.wordCard__defListItem}\">`;\n\n      definitions.forEach(definitionData => {\n        if (definitionData['sn']) {\n          const definitionNumber = definitionData['sn'];\n          html += `<b class=\"${styles.wordCard__defListNum}\">${definitionNumber}</b>`;\n        }\n\n        if (definitionData['dt']) {\n          let definition = '';\n\n          definitionData['dt'].forEach(elem => {\n            definition = '';\n            if (elem[0] === 'text') {\n              definition += elem[1];\n            }\n            if (elem[0] === 'uns') {\n              definition += `<span class=\"${styles.wordCard__defExample}\">Note:</span> ${elem[1][0][0][1]}`;\n            }\n            if (definition.length !== 0) {\n              html += `${cleanText(definition)}</br>`;\n            }\n          });\n\n          let example = '';\n          definitionData['dt'].forEach(elem => {\n            example = '';\n            if (elem[0] === 'vis') {\n              const [{ t: exampleContent }] = elem[1];\n              example = exampleContent;\n            }\n            if (elem[0] === 'uns') {\n              elem[1].forEach(item => {\n                if (item[0] === 'vis') {\n                  example += `${item[0]}`;\n                }\n              });\n            }\n            if (example.length !== 0) {\n              html += `<i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i></br>`;\n            }\n          });\n        }\n      });\n      html += '</p>';\n      return html;\n    };\n\n    const createRelativesList = relatives => {\n      let html = '';\n      relatives.forEach(relativeData => {\n        const { ure: relativeWord, fl: wordGrammaticalFunction } = relativeData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n        <b class=\"${styles.wordCard__defListNum}\">${changeAsteriskToDot(\n          relativeWord,\n        )}</b> <i>${wordGrammaticalFunction}</i>\n        </p>`;\n      });\n      return html;\n    };\n\n    const createHistoryList = historyElements => {\n      let html = '';\n      historyElements.forEach(historyData => {\n        const [, history] = historyData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">${cleanText(history)}</p>`;\n      });\n      return html;\n    };\n\n    let result = `<div class=\"${styles.wordCard}\">`;\n\n    response.forEach(dataItem => {\n      const currentWord = dataItem['meta']['id'].split(':')[0];\n      let dataItemCard = '';\n\n      if (dataItem['meta']) {\n        dataItemCard += `<h3 class=\"${styles.wordCard__title}\">\n                          ${currentWord}`;\n      }\n\n      if (dataItem['fl']) {\n        const wordGrammaticalFunction = dataItem['fl'];\n        dataItemCard += `<i class=\"${styles.wordCard__grammatical}\">\n                        ${wordGrammaticalFunction}\n                        </i></h3>`;\n      } else {\n        dataItemCard += '</h3>';\n      }\n\n      if (dataItem['hwi']) {\n        const wordSyllables = dataItem['hwi']['hw'];\n        dataItemCard += `<p class=\"${styles.wordCard__wordSyllables}\">\n                          ${changeAsteriskToDot(wordSyllables)}`;\n        if (dataItem['hwi']['prs']) {\n          const [{ mw: wordTranscription }] = dataItem['hwi']['prs'];\n          dataItemCard += `<span class=\"${styles.wordCard__verticalDivider}\">|</span> \\\\ ${wordTranscription} \\\\`;\n        }\n        dataItemCard += '</p><hr>';\n      }\n\n      if (dataItem['meta']['stems']) {\n        const stemsArr = dataItem['meta']['stems'];\n        dataItemCard += ` <div>\n                            <p><b class=\"${styles.wordCard__defListNum}\">Variants: </b></p>`;\n        stemsArr.forEach(variant => {\n          dataItemCard += `<p>${cleanText(variant)}</p>`;\n        });\n        dataItemCard += `</div><hr>`;\n      }\n\n      if (dataItem['def']) {\n        const [{ sseq: definitionGroups }] = dataItem['def'];\n        dataItemCard += `<h4 class=\"${styles.wordCard__defTitle}\">\n                        Definition of <i>'${currentWord}'</i> :\n                        </h4>\n                        <div>${createDefList(definitionGroups)}</div>\n                        <hr>`;\n      }\n\n      if (dataItem['uros']) {\n        const relativesArr = dataItem['uros'];\n        dataItemCard += `<h4 class=\"${styles.wordCard__defTitle}\">\n                        Other Words from\n                        <i>'${currentWord}'</i> :\n                        </h4>\n                        <div>${createRelativesList(relativesArr)}</div>\n                        <hr>`;\n      }\n\n      if (dataItem['date']) {\n        const mentioningDate = dataItem['date'];\n        dataItemCard += `<div>\n                        <p><b class=\"${styles.wordCard__defListNum}\">First Known Use: </b></p>\n                        <p>${cleanText(mentioningDate)}.</p>\n                        </div>`;\n      }\n\n      if (dataItem['et']) {\n        const wordHistory = dataItem['et'];\n        dataItemCard += ` <div>\n                            <p><b class=\"${styles.wordCard__defListNum}\">Etymology: </b></p>\n                            <p>${createHistoryList(wordHistory)}</p>\n                          </div>\n                          <hr>`;\n      }\n      dataItemCard += '<hr>';\n      result += dataItemCard;\n    });\n\n    result += '</div>';\n    return result;\n  };\n\n  const parseDataFromThesaurusResponse = response => {\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n      let html = '';\n\n      definitions.forEach(definitionData => {\n        const {\n          sn: definitionNumber = '',\n          dt: [[, definition], [, [{ t: example }]] = [, [{ t: 'no example' }]]],\n          sdsense: additionData,\n          syn_list: [synonyms],\n          rel_list: relatedWordGroups,\n        } = definitionData;\n\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n                  <b>${definitionNumber}</b>\n                  ${cleanText(definition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i>\n                </p>`;\n\n        if (additionData) {\n          const {\n            dt: [[, additionDefinition], [, [{ t: additionExample }]] = [, [{ t: 'no example' }]]],\n          } = additionData;\n          html += `<p class=\"${styles.wordCard__defListItem}\">\n                  also ${cleanText(additionDefinition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(additionExample)}</i>\n                </p>`;\n        }\n\n        html += `<hr>\n                <h4>Synonyms:</h4>\n                <ul>`;\n        synonyms.forEach(synonymData => {\n          const { wd: synonym } = synonymData;\n          html += `<li>${synonym}</li>`;\n        });\n        html += `</ul>`;\n\n        html += `<hr>\n                <h4>Related words:</h4>\n                <ul>`;\n        relatedWordGroups.forEach(relatedWordGroup => {\n          html += `<ul>`;\n          relatedWordGroup.forEach(relatedWordData => {\n            const { wd: relatedWord } = relatedWordData;\n            html += `<li>${relatedWord}</li>`;\n          });\n          html += `</ul>`;\n        });\n        html += `</ul>`;\n      });\n      return html;\n    };\n\n    // console.log(response);\n\n    const {\n      meta: { id: currentWord },\n      fl: wordGrammaticalFunction,\n      def: [{ sseq: definitionGroups }],\n    } = response;\n\n    return `<div class=\"${styles.wordCard}\">\n              <h3 class=\"${styles.wordCard__title}\">\n                ${currentWord}\n                <i class=\"${styles.wordCard__grammatical}\">\n                ${wordGrammaticalFunction}\n                </i>\n              </h3>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Definition of <i>'${currentWord}'</i> :\n              </h4>\n              <div>${createDefList(definitionGroups)}</div>\n              <hr>\n\n              </div>`;\n  };\n\n  window.dataStore.isWordDataLoading = true;\n  window.dataStore.wordDataError = null;\n\n  if (\n    event.target.getAttribute('data-value') !== null &&\n    event.target.getAttribute('data-value') !== undefined\n  ) {\n    window.dataStore.currentWord = event.target.getAttribute('data-value');\n    window.renderApp();\n\n    getWordData(window.dataStore.currentWord, window.dataStore.currentDictionary)\n      .then(data => {\n        // console.log(data);\n        window.dataStore.isWordDataLoading = false;\n\n        if (window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\") {\n          window.dataStore.currentDictionaryCard = parseDataFromCollegiateResponse(data);\n        } else if (\n          window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\"\n        ) {\n          window.dataStore.currentDictionaryCard = parseDataFromThesaurusResponse(data);\n        }\n      })\n      .catch(() => {\n        window.dataStore.wordDataError = 'Some error occurred. Try again!';\n      })\n      .finally(() => {\n        window.renderApp();\n      });\n  }\n};\n\nwindow.changeCurrentDictionary = value => {\n  window.dataStore.currentDictionary = value;\n  if (window.dataStore.currentWord === undefined) {\n    window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n  } else {\n    window.setCurrentDictionaryCard();\n  }\n};\n\nwindow.setCurrentDictionaryCard = () => {\n  window.dataStore.currentDictionaryCard = getWordData(\n    window.dataStore.currentWord,\n    window.dataStore.currentDictionary,\n  );\n};\n\nwindow.createActiveText = str => {\n  let html = `<div id=\"activeInputContent\"\n                   class=\"${styles.activeTextBlock}\"\n                   onclick=\"window.activeTextHandler(event)\">`;\n  str\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n    .split(' ')\n    .forEach(word => {\n      html += `<a href='#'\n                  class=\"${styles.activeTextBlock__word}\"\n                  data-value=\"${word}\">${word}</a> `;\n    });\n  html += '</div>';\n  return html;\n};\n\nconst header = () => {\n  return `<header class=\"${styles.header}\">\n      <a href=\"#\"><img class=\"${styles.header__logo}\" src=\"${logo}\" alt=\"logo\" /></a>\n      <h1 class=\"${styles.header__title}\">Lexicon</h1>\n    </header>`;\n};\n\nconst inputBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n  <textarea\n  id=\"input\"\n    class=\"${styles.inputBlock__textarea}\"\n    rows=\"10\"\n    cols=\"50\"\n    placeholder=\"Write or paste your text here.\">${window.dataStore.currentInputtedText}</textarea>\n  <button onclick=\"window.startApp();\"\n  >Translate</button>\n  <button onclick=\"window.resetApp();\">\n    Clear\n  </button>\n  </div>`;\n};\n\nconst footer = () => {\n  const dictionarySwitch = () => {\n    return window.dataStore.dictionarySet\n      .map(dictionary => {\n        return `<label>\n                <input\n                class=\"${styles.footer__radioInput}\"\n                type=\"radio\"\n                value=\"${dictionary}\"\n                name=\"dictionary\"\n                ${dictionary === window.dataStore.currentDictionary ? 'checked' : ''}\n                onchange=\"changeCurrentDictionary(this.value); window.renderApp()\"\n                />\n                <span class=\"${styles.footer__dictionarySwitchButton}\">${dictionary}</span>\n              </label>`;\n      })\n      .join('');\n  };\n  return `<footer class=\"${styles.footer}\">\n  ${dictionarySwitch()}\n  </footer>`;\n};\n\nconst textTranslationResults = () => {\n  const translationBlock = content => {\n    return `<div id=\"output\" class=\"${styles.appRoot__item} ${styles.translationBlock}\">\n            <div class=\"${styles.translationBlock__wrapper}\">${content}</div>\n          </div>`;\n  };\n\n  const activeTextBlock = content => {\n    return `<div class=\"${styles.appRoot__item}\">\n    ${content}\n  </div>`;\n  };\n\n  let translationContent = '';\n  let activeTextContent = '';\n\n  if (window.dataStore.translationError !== null) {\n    translationContent = window.dataStore.translationError;\n    activeTextContent = window.dataStore.translationError;\n  } else if (window.dataStore.isTranslationLoading === false) {\n    translationContent = window.dataStore.currentTranslation;\n    activeTextContent = window.dataStore.currentActiveText;\n  } else {\n    translationContent = 'Loading... Please, wait!';\n    activeTextContent = window.dataStore.currentActiveText;\n  }\n  return `${translationBlock(translationContent)}\n          <br/>\n          ${activeTextBlock(activeTextContent)}`;\n};\n\nconst wordDataResults = () => {\n  const dictionaryCardBlock = content => {\n    return `<div id=\"dictionaryCardBlock\" class=\"${styles.appRoot__item} ${styles.dictionaryCardBlock}\">${content}</div>`;\n  };\n  let wordDataContent = '';\n\n  if (window.dataStore.wordDataError !== null) {\n    wordDataContent = window.dataStore.wordDataError;\n  } else if (window.dataStore.isTranslationLoading === false) {\n    wordDataContent = window.dataStore.currentDictionaryCard;\n  } else {\n    wordDataContent = 'Loading... Please, wait!';\n  }\n  return `${dictionaryCardBlock(wordDataContent)}`;\n};\n\nconst app = () => {\n  return `<div class=\"${styles.appRootContainer}\">\n  ${header()}\n  ${inputBlock()}\n  <br/>\n  ${textTranslationResults()}\n  <br/>\n  ${wordDataResults()}\n  ${footer()}\n  </div>`;\n};\n\nconst ROOT = document.querySelector('#app-root');\n\nwindow.renderApp = () => {\n  ROOT.classList.add(`${styles.appRoot}`);\n  ROOT.innerHTML = app();\n};\n\nwindow.renderApp();\n\n// getTranslate(\n//   'Function Expression: When a function is assigned *&^%^#%%^$$#!sjd897987) to a variable. The function &*^klj782=++++364&^# can be named, or anonymous. Use the variable name to call a +_==-564 function defined in a function expression.',\n// );\n"]}