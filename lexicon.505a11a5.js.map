{"version":3,"sources":["translation-responses.js","collegiate-responses.js","thesaurus-responses.js","index.js"],"names":["translationResponses","umpire","voluminous","collegiateResponse","meta","id","uuid","sort","src","section","stems","offensive","hwi","hw","prs","mw","sound","audio","ref","stat","fl","def","sseq","sn","dt","t","sdsense","sd","uros","ure","et","date","ld_link","link_hw","link_fl","suppl","examples","ldq","ldhw","sls","shortdef","thesaurusResponse","target","tuuid","tsrc","syns","ants","syn_list","wd","rel_list","window","dataStore","dictionarySet","currentDictionary","currentInputtedText","currentTranslation","currentActiveText","currentWord","undefined","currentDictionaryCard","styles","dictionaryCardBlock__cover","wmCover","dictionaryCardBlock__coverTitle","startApp","inputValue","document","querySelector","value","createActiveText","getTranslation","resetApp","changeCurrentDictionary","setCurrentDictionaryCard","str","data","replace","parseDataFromTranslationResponse","setCurrentWord","event","getAttribute","getWordInformation","html","activeTextBlock","trim","split","forEach","word","activeTextBlock__word","cleanText","clearText","hasLink","test","hasNeedCapitalize","hasReferenceToDefinition","linkLessTarget","match","linkLessRes","needCapitalize","capitalized","toUpperCase","needReference","numberOfReference","punctuationLessWord","response","changeAsteriskToDot","wordSyllables","wordTranscription","wordGrammaticalFunction","definitionGroups","relatives","historyElements","wordCard","wordCard__title","wordCard__grammatical","wordCard__headword","wordCard__verticalDivider","wordCard__defTitle","definitions","flat","map","definitionItem","definition","definitionData","definitionNumber","example","additionData","wordCard__defListItem","wordCard__defListNum","wordCard__defExample","additionDefinition","additionExample","createDefList","relativeData","relativeWord","createRelativesList","exampleData","wordCard__exampleInSentences","createExamplesList","historyData","history","createHistoryList","parseDataFromCollegiateResponse","synonyms","relatedWordGroups","synonymData","synonym","relatedWordGroup","relatedWordData","relatedWord","parseDataFromThesaurusResponse","header","header__logo","logo","header__title","inputBlock","appRoot__item","inputBlock__textarea","translationBlock","dictionaryCardBlock","footer","dictionary","footer__radioInput","footer__dictionarySwitchButton","join","dictionarySwitch","app","appRootContainer","ROOT","renderApp","classList","add","appRoot","innerHTML"],"mappings":"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","file":"lexicon.505a11a5.js","sourceRoot":"..","sourcesContent":["'use strict';\nexport const translationResponses = {\n  umpire: [[['судья', 'umpire', null, null, 10]], null, 'en', null, null, null, null, []],\n  voluminous: [\n    [['объемный', 'voluminous', null, null, 10]],\n    null,\n    'en',\n    null,\n    null,\n    null,\n    null,\n    [],\n  ],\n};\n","'use strict';\nexport const collegiateResponse = {\n  meta: {\n    id: 'voluminous',\n    uuid: '0d01b967-971f-4ec5-8fe0-10513d29c39b',\n    sort: '220130400',\n    src: 'collegiate',\n    section: 'alpha',\n    stems: ['voluminous', 'voluminously', 'voluminousness', 'voluminousnesses'],\n    offensive: false,\n  },\n  hwi: {\n    hw: 'vo*lu*mi*nous',\n    prs: [\n      {\n        mw: 'v\\u0259-\\u02c8l\\u00fc-m\\u0259-n\\u0259s',\n        sound: {\n          audio: 'volumi02',\n          ref: 'c',\n          stat: '1',\n        },\n      },\n    ],\n  },\n  fl: 'adjective',\n  def: [\n    {\n      sseq: [\n        [\n          [\n            'sense',\n            {\n              sn: '1 a',\n              dt: [\n                ['text', '{bc}having or marked by great {a_link|volume} or bulk {bc}{sx|large||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'long {wi}voluminous{/wi} tresses',\n                    },\n                  ],\n                ],\n              ],\n              sdsense: {\n                sd: 'also',\n                dt: [\n                  ['text', '{bc}{sx|full||} '],\n                  [\n                    'vis',\n                    [\n                      {\n                        t: 'a {wi}voluminous{/wi} skirt',\n                      },\n                    ],\n                  ],\n                ],\n              },\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}{sx|numerous||} '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'trying to keep track of {wi}voluminous{/wi} slips of paper',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '2 a',\n              dt: [\n                [\n                  'text',\n                  '{bc}filling or capable of filling a large volume or several {a_link|volumes} ',\n                ],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} literature on the subject',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n          [\n            'sense',\n            {\n              sn: 'b',\n              dt: [\n                ['text', '{bc}writing or speaking much or at great length '],\n                [\n                  'vis',\n                  [\n                    {\n                      t: 'a {wi}voluminous{/wi} correspondent',\n                    },\n                  ],\n                ],\n              ],\n            },\n          ],\n        ],\n        [\n          [\n            'sense',\n            {\n              sn: '3',\n              dt: [\n                ['text', '{bc}consisting of many folds, coils, or convolutions {bc}{sx|winding||}'],\n              ],\n            },\n          ],\n        ],\n      ],\n    },\n  ],\n  uros: [\n    {\n      ure: 'vo*lu*mi*nous*ly',\n      fl: 'adverb',\n    },\n    {\n      ure: 'vo*lu*mi*nous*ness',\n      fl: 'noun',\n    },\n  ],\n  et: [['text', 'Late Latin {it}voluminosus{/it}, from Latin {it}volumin-, volumen{/it}']],\n  date: '1611{ds||3||}',\n  ld_link: {\n    link_hw: 'voluminous',\n    link_fl: 'adjective',\n  },\n  suppl: {\n    examples: [\n      {\n        t: 'the building\\u0027s high ceilings and {it}voluminous{/it} spaces',\n      },\n      {\n        t: 'a writer of {it}voluminous{/it} output',\n      },\n    ],\n    ldq: {\n      ldhw: 'voluminous',\n      fl: 'adjective',\n      def: [\n        {\n          sls: ['formal'],\n          sseq: [\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}very large {bc}containing a lot of space']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  sls: ['of clothing'],\n                  dt: [['text', '{bc}using large amounts of fabric {bc}very full']],\n                },\n              ],\n            ],\n            [\n              [\n                'sense',\n                {\n                  dt: [['text', '{bc}having very many words or pages']],\n                },\n              ],\n            ],\n          ],\n        },\n      ],\n    },\n  },\n  shortdef: [\n    'having or marked by great volume or bulk : large; also : full',\n    'numerous',\n    'filling or capable of filling a large volume or several volumes',\n  ],\n};\n","'use strict';\nexport const thesaurusResponse = {\n  meta: {\n    id: 'umpire',\n    uuid: '1c8533d7-23e6-4c3b-9c48-854066e8caff',\n    src: 'coll_thes',\n    section: 'alpha',\n    target: {\n      tuuid: '897edcad-2e88-4ab7-b81b-170ddf8eb4ec',\n      tsrc: 'collegiate',\n    },\n    stems: ['umpire', 'umpires'],\n    syns: [['adjudicator', 'arbiter', 'arbitrator', 'judge', 'referee']],\n    ants: [],\n    offensive: false,\n  },\n  hwi: {\n    hw: 'umpire',\n  },\n  fl: 'noun',\n  def: [\n    {\n      sseq: [\n        [\n          [\n            'sense',\n            {\n              dt: [\n                ['text', 'a person who impartially decides or resolves a dispute or controversy '],\n                [\n                  'vis',\n                  [\n                    {\n                      t:\n                        'usually acts as {it}umpire{/it} in the all-too-frequent squabbles between the two other roommates',\n                    },\n                  ],\n                ],\n              ],\n              syn_list: [\n                [\n                  {\n                    wd: 'adjudicator',\n                  },\n                  {\n                    wd: 'arbiter',\n                  },\n                  {\n                    wd: 'arbitrator',\n                  },\n                  {\n                    wd: 'judge',\n                  },\n                  {\n                    wd: 'referee',\n                  },\n                ],\n              ],\n              rel_list: [\n                [\n                  {\n                    wd: 'jurist',\n                  },\n                  {\n                    wd: 'justice',\n                  },\n                  {\n                    wd: 'magistrate',\n                  },\n                ],\n                [\n                  {\n                    wd: 'intermediary',\n                  },\n                  {\n                    wd: 'intermediate',\n                  },\n                  {\n                    wd: 'mediator',\n                  },\n                  {\n                    wd: 'mediatrix',\n                  },\n                  {\n                    wd: 'moderator',\n                  },\n                  {\n                    wd: 'negotiator',\n                  },\n                ],\n                [\n                  {\n                    wd: 'conciliator',\n                  },\n                  {\n                    wd: 'go-between',\n                  },\n                  {\n                    wd: 'peacemaker',\n                  },\n                  {\n                    wd: 'reconciler',\n                  },\n                  {\n                    wd: 'troubleshooter',\n                  },\n                ],\n                [\n                  {\n                    wd: 'decider',\n                  },\n                ],\n              ],\n            },\n          ],\n        ],\n      ],\n    },\n  ],\n  shortdef: ['a person who impartially decides or resolves a dispute or controversy'],\n};\n","'use strict';\n\nimport { translationResponses } from './translation-responses.js';\nimport { collegiateResponse } from './collegiate-responses.js';\nimport { thesaurusResponse } from './thesaurus-responses.js';\n\nimport styles from './styles.css';\n\nimport wmCover from './img/mw-cover_.svg';\nimport logo from './img/logo.svg';\n\nwindow.dataStore = {\n  dictionarySet: [\n    \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n    \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\",\n  ],\n  currentDictionary: \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\",\n  currentInputtedText: '',\n  currentTranslation: 'There will be translation here...',\n  currentActiveText:\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\",\n  currentWord: undefined,\n  currentDictionaryCard: `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY</p>\n                          </div>`,\n};\n\nwindow.startApp = () => {\n  const inputValue = document.querySelector('#input').value;\n  if (inputValue !== '') {\n    window.dataStore.currentInputtedText = inputValue;\n    window.dataStore.currentActiveText = window.createActiveText(\n      window.dataStore.currentInputtedText,\n    );\n    window.dataStore.currentTranslation = window.getTranslation(\n      window.dataStore.currentInputtedText,\n    );\n  }\n};\n\nwindow.resetApp = () => {\n  window.dataStore.currentInputtedText = '';\n  window.dataStore.currentActiveText =\n    \"There will be clickable text here to get data from MERRIAM-WEBSTER'S DICTIONARIES...\";\n  window.dataStore.currentTranslation = 'There will be translation here...';\n  window.dataStore.currentWord = undefined;\n  window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n};\n\nwindow.changeCurrentDictionary = value => {\n  window.dataStore.currentDictionary = value;\n  if (window.dataStore.currentWord === undefined) {\n    window.dataStore.currentDictionaryCard = `<div>\n                            <img class=\"${styles.dictionaryCardBlock__cover}\" src=\"${wmCover}\" alt=\"merriam-webster's logo\">\n                            <p class=\"${styles.dictionaryCardBlock__coverTitle}\">${window.dataStore.currentDictionary}</p>\n                          </div>`;\n  } else {\n    window.setCurrentDictionaryCard();\n  }\n};\n\nwindow.getTranslation = str => {\n  const parseDataFromTranslationResponse = data => {\n    return data[0][0][0]\n      .replace(/\\s*<\\s*>/g, '.')\n      .replace(/\\s*<\\s*1\\s*>/g, '!')\n      .replace(/\\s*<\\s*3\\s*>/g, '<br>')\n      .replace(/\\s*<\\s*2\\s*>/g, '?');\n  };\n\n  if (translationResponses[str]) {\n    return parseDataFromTranslationResponse(translationResponses[str]);\n  } else {\n    return 'Я переведу тебе этот текст в своей следующей версии.';\n  }\n};\n\nwindow.setCurrentWord = event => {\n  if (event.target.getAttribute('data-value') !== null) {\n    window.dataStore.currentWord = event.target.getAttribute('data-value');\n  }\n};\n\nwindow.setCurrentDictionaryCard = () => {\n  window.dataStore.currentDictionaryCard = window.getWordInformation();\n};\n\nwindow.createActiveText = str => {\n  let html = `<div id=\"activeInputContent\"\n                   class=\"${styles.activeTextBlock}\"\n                   onclick=\"window.setCurrentWord(event);\n                   window.setCurrentDictionaryCard();\n                   window.renderApp()\">`;\n  str\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n    .split(' ')\n    .forEach(word => {\n      html += `<a href='#'\n                  class=\"${styles.activeTextBlock__word}\"\n                  data-value=\"${word}\">${word}</a> `;\n    });\n  html += '</div>';\n  return html;\n};\n\nwindow.getWordInformation = () => {\n  const cleanText = str => {\n    let clearText = str\n      .replace(/({bc})/g, ': ')\n      .replace(/({wi})/g, '')\n      .replace(/({\\/wi})/g, '')\n      .replace(/({\\/it})/g, '')\n      .replace(/({it})/g, '');\n    const hasLink = /({a_link\\|).+?}/.test(clearText);\n    const hasNeedCapitalize = /({sx\\|).+?(\\|\\|})/.test(clearText);\n    const hasReferenceToDefinition = /({ds\\|\\|).+?(\\|\\|})/.test(clearText);\n    //Make text linkLess\n    if (hasLink) {\n      const [linkLessTarget] = clearText.match(/({a_link\\|).+?}/);\n      const linkLessRes = linkLessTarget.replace(/({a_link\\|)/g, '').replace(/}/g, '');\n      clearText = clearText.replace(/({a_link\\|).+?}/, linkLessRes);\n    }\n    //Make text capitalized\n    if (hasNeedCapitalize) {\n      const [needCapitalize] = clearText.match(/({sx\\|).+?(\\|\\|})/);\n      const capitalized = needCapitalize\n        .replace(/({sx\\|)/g, '')\n        .replace(/(\\|\\|})/g, '')\n        .toUpperCase();\n      clearText = clearText.replace(/({sx\\|).+?(\\|\\|})/, capitalized);\n    }\n    // Add reference to definition\n    if (hasReferenceToDefinition) {\n      const [needReference] = clearText.match(/({ds\\|\\|).+?(\\|\\|})/);\n      const numberOfReference = needReference.replace(/({ds\\|\\|)/g, '').replace(/(\\|\\|})/g, '');\n      clearText = clearText.replace(\n        /({ds\\|\\|).+?(\\|\\|})/,\n        `, in the meaning defined at sense ${numberOfReference}`,\n      );\n    }\n    if (hasLink || hasNeedCapitalize || hasReferenceToDefinition) {\n      cleanText(clearText);\n    }\n    return clearText;\n  };\n\n  const parseDataFromCollegiateResponse = response => {\n    const changeAsteriskToDot = str => {\n      return str.replace(/\\*/g, '·​');\n    };\n\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n      let html = '';\n\n      definitions.forEach(definitionData => {\n        const {\n          sn: definitionNumber,\n          dt: [[, definition], [, [{ t: example }]] = [, [{ t: 'no example' }]]],\n          sdsense: additionData,\n        } = definitionData;\n\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n                  <b class=\"${styles.wordCard__defListNum}\">${definitionNumber}</b>\n                  ${cleanText(definition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i>\n                </p>`;\n\n        if (additionData) {\n          const {\n            dt: [[, additionDefinition], [, [{ t: additionExample }]] = [, [{ t: 'no example' }]]],\n          } = additionData;\n          html += `<p class=\"${styles.wordCard__defListItem}\">\n                  also ${cleanText(additionDefinition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(additionExample)}</i>\n                </p>`;\n        }\n      });\n      return html;\n    };\n\n    const createRelativesList = relatives => {\n      let html = '';\n      relatives.forEach(relativeData => {\n        const { ure: relativeWord, fl: wordGrammaticalFunction } = relativeData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n        <b class=\"${styles.wordCard__defListNum}\">${changeAsteriskToDot(\n          relativeWord,\n        )}</b> <i>${wordGrammaticalFunction}</i>\n        </p>`;\n      });\n      return html;\n    };\n\n    const createExamplesList = examples => {\n      let html = '';\n      examples.forEach(exampleData => {\n        const { t: example } = exampleData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n                  <i class=\"${styles.wordCard__exampleInSentences}\">// ${cleanText(example)}</i>\n                </p>`;\n      });\n      return html;\n    };\n\n    const createHistoryList = historyElements => {\n      let html = '';\n      historyElements.forEach(historyData => {\n        const [, history] = historyData;\n        html += `<p class=\"${styles.wordCard__defListItem}\">${cleanText(history)}</p>`;\n      });\n      return html;\n    };\n\n    const {\n      meta: { id: currentWord },\n      hwi: {\n        hw: wordSyllables,\n        prs: [{ mw: wordTranscription }],\n      },\n      fl: wordGrammaticalFunction,\n      def: [{ sseq: definitionGroups }],\n      uros: relatives,\n      suppl: { examples },\n      et: historyElements,\n      date,\n    } = response;\n\n    return `<div class=\"${styles.wordCard}\">\n              <h3 class=\"${styles.wordCard__title}\">\n                ${currentWord}\n                <i class=\"${styles.wordCard__grammatical}\">\n                ${wordGrammaticalFunction}\n                </i>\n              </h3>\n              <p class=\"${styles.wordCard__headword}\">\n                ${changeAsteriskToDot(wordSyllables)}\n                <span class=\"${styles.wordCard__verticalDivider}\">|</span>\n                \\\\ ${wordTranscription} \\\\\n              </p>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Definition of <i>'${currentWord}'</i> :\n              </h4>\n              <div>${createDefList(definitionGroups)}</div>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Other Words from\n                <i>'${currentWord}'</i> :\n              </h4>\n              <div>${createRelativesList(relatives)}</div>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Examples of <i>'${currentWord}'</i> in a Sentence :\n              </h4>\n              <div>${createExamplesList(examples)}</div>\n              <hr>\n              <div>\n                <p><b class=\"${styles.wordCard__defListNum}\">First Known Use: </b></p>\n                <p>${cleanText(date)}.</p>\n              </div>\n              <div>\n                <p><b class=\"${styles.wordCard__defListNum}\">Etymology: </b></p>\n                <p>${createHistoryList(historyElements)}</p>\n              </div>\n              <hr>\n              </div>`;\n  };\n\n  const parseDataFromThesaurusResponse = response => {\n    const createDefList = definitionGroups => {\n      const definitions = definitionGroups.flat().map(definitionItem => {\n        const [, definition] = definitionItem;\n        return definition;\n      });\n      let html = '';\n\n      definitions.forEach(definitionData => {\n        const {\n          sn: definitionNumber = '',\n          dt: [[, definition], [, [{ t: example }]] = [, [{ t: 'no example' }]]],\n          sdsense: additionData,\n          syn_list: [synonyms],\n          rel_list: relatedWordGroups,\n        } = definitionData;\n\n        html += `<p class=\"${styles.wordCard__defListItem}\">\n                  <b>${definitionNumber}</b>\n                  ${cleanText(definition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(example)}</i>\n                </p>`;\n\n        if (additionData) {\n          const {\n            dt: [[, additionDefinition], [, [{ t: additionExample }]] = [, [{ t: 'no example' }]]],\n          } = additionData;\n          html += `<p class=\"${styles.wordCard__defListItem}\">\n                  also ${cleanText(additionDefinition)}</br>\n                  <i class=\"${styles.wordCard__defExample}\">// ${cleanText(additionExample)}</i>\n                </p>`;\n        }\n\n        html += `<hr>\n                <h4>Synonyms:</h4>\n                <ul>`;\n        synonyms.forEach(synonymData => {\n          const { wd: synonym } = synonymData;\n          html += `<li>${synonym}</li>`;\n        });\n        html += `</ul>`;\n\n        html += `<hr>\n                <h4>Related words:</h4>\n                <ul>`;\n        relatedWordGroups.forEach(relatedWordGroup => {\n          html += `<ul>`;\n          relatedWordGroup.forEach(relatedWordData => {\n            const { wd: relatedWord } = relatedWordData;\n            html += `<li>${relatedWord}</li>`;\n          });\n          html += `</ul>`;\n        });\n        html += `</ul>`;\n      });\n      return html;\n    };\n\n    const {\n      meta: { id: currentWord },\n      fl: wordGrammaticalFunction,\n      def: [{ sseq: definitionGroups }],\n    } = response;\n\n    return `<div class=\"${styles.wordCard}\">\n              <h3 class=\"${styles.wordCard__title}\">\n                ${currentWord}\n                <i class=\"${styles.wordCard__grammatical}\">\n                ${wordGrammaticalFunction}\n                </i>\n              </h3>\n              <hr>\n              <h4 class=\"${styles.wordCard__defTitle}\">\n                Definition of <i>'${currentWord}'</i> :\n              </h4>\n              <div>${createDefList(definitionGroups)}</div>\n              <hr>\n\n              </div>`;\n  };\n\n  const punctuationLessWord = window.dataStore.currentWord.replace(\n    /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()?]/g,\n    '',\n  );\n\n  if (window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY\") {\n    if (collegiateResponse['meta']['id'] === punctuationLessWord) {\n      return parseDataFromCollegiateResponse(collegiateResponse);\n    } else {\n      return `<div class=\"${styles.wordCard}\">We do not have any information about word \"${punctuationLessWord}\" yet...</div>`;\n    }\n  } else if (window.dataStore.currentDictionary === \"MERRIAM-WEBSTER'S COLLEGIATE THESAURUS\") {\n    if (thesaurusResponse['meta']['id'] === punctuationLessWord) {\n      return parseDataFromThesaurusResponse(thesaurusResponse);\n    } else {\n      return `<div class=\"${styles.wordCard}\">We do not have any information about word \"${punctuationLessWord}\" yet...</div>`;\n    }\n  }\n};\n\nconst header = () => {\n  return `<header class=\"${styles.header}\">\n      <a href=\"#\"><img class=\"${styles.header__logo}\" src=\"${logo}\" alt=\"logo\" /></a>\n      <h1 class=\"${styles.header__title}\">Lexicon</h1>\n    </header>`;\n};\n\nconst inputBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n  <textarea\n  id=\"input\"\n    class=\"${styles.inputBlock__textarea}\"\n    rows=\"10\"\n    cols=\"50\"\n    placeholder=\"Write or paste your text here.\nIn this version You can get data for word 'voluminous' from MERRIAM-WEBSTER'S COLLEGIATE DICTIONARY.\nor\nYou can get data for word 'umpire' from MERRIAM-WEBSTER'S COLLEGIATE THESAURUS.\nHave a productive work!\">${window.dataStore.currentInputtedText}</textarea>\n  <button onclick=\"window.startApp(); window.renderApp()\"\n  >Translate</button>\n  <button onclick=\"window.resetApp(); window.renderApp()\">\n    Clear\n  </button>\n  </div>`;\n};\n\nconst translationBlock = () => {\n  return `<div id=\"output\" class=\"${styles.appRoot__item}\">${window.dataStore.currentTranslation}</div>`;\n};\n\nconst activeTextBlock = () => {\n  return `<div class=\"${styles.appRoot__item}\">\n    ${window.dataStore.currentActiveText}\n  </div>`;\n};\n\nconst dictionaryCardBlock = () => {\n  return `<div id=\"dictionaryCardBlock\" class=\"${styles.appRoot__item} ${styles.dictionaryCardBlock}\">\n            ${window.dataStore.currentDictionaryCard}\n          </div>`;\n};\n\nconst footer = () => {\n  const dictionarySwitch = () => {\n    return window.dataStore.dictionarySet\n      .map(dictionary => {\n        return `<label>\n                <input\n                class=\"${styles.footer__radioInput}\"\n                type=\"radio\"\n                value=\"${dictionary}\"\n                name=\"dictionary\"\n                ${dictionary === window.dataStore.currentDictionary ? 'checked' : ''}\n                onchange=\"changeCurrentDictionary(this.value); window.renderApp()\"\n                />\n                <span class=\"${styles.footer__dictionarySwitchButton}\">${dictionary}</span>\n              </label>`;\n      })\n      .join('');\n  };\n  return `<footer class=\"${styles.footer}\">\n  ${dictionarySwitch()}\n  </footer>`;\n};\n\nconst app = () => {\n  return `<div class=\"${styles.appRootContainer}\">\n  ${header()}\n  ${inputBlock()}\n  <br/>\n  ${translationBlock()}\n  <br/>\n  ${activeTextBlock()}\n  <br/>\n  ${dictionaryCardBlock()}\n  ${footer()}\n  </div>`;\n};\n\nconst ROOT = document.querySelector('#app-root');\n\nwindow.renderApp = () => {\n  ROOT.classList.add(`${styles.appRoot}`);\n  ROOT.innerHTML = app();\n};\n\nrenderApp();\n"]}